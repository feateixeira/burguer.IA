// ============================================
// EDGE FUNCTION: create-user
// Substitua o cÃ³digo ATUAL na Edge Function "create-user"
// ============================================

import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

Deno.serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabaseUrl = Deno.env.get('SUPABASE_URL')
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')
    
    if (!supabaseUrl || !supabaseServiceKey) {
      console.error('Missing environment variables:', {
        hasUrl: !!supabaseUrl,
        hasServiceKey: !!supabaseServiceKey
      })
      throw new Error('Server configuration error: Missing required environment variables')
    }

    const supabaseAdmin = createClient(
      supabaseUrl,
      supabaseServiceKey,
      {
        auth: {
          autoRefreshToken: false,
          persistSession: false
        }
      }
    )

    const { email, password, name, establishmentName } = await req.json()
    
    // Validate required fields
    if (!email || !password) {
      throw new Error('Email and password are required')
    }
    
    if (!email.includes('@')) {
      throw new Error('Invalid email format')
    }
    
    if (password.length < 6) {
      throw new Error('Password must be at least 6 characters')
    }

    // Verify that the request is from an admin user
    const authHeader = req.headers.get('Authorization')
    if (!authHeader) {
      throw new Error('Authorization header is required')
    }

    const token = authHeader.replace('Bearer ', '')
    const { data: { user }, error: authError } = await supabaseAdmin.auth.getUser(token)
    
    if (authError || !user) {
      throw new Error('Invalid authentication')
    }

    // Check if the user is an admin
    const { data: profile } = await supabaseAdmin
      .from('profiles')
      .select('is_admin')
      .eq('user_id', user.id)
      .single()

    if (!profile?.is_admin) {
      throw new Error('Access denied. Admin privileges required.')
    }

    // Create the new user
    const { data: newUser, error: createError } = await supabaseAdmin.auth.admin.createUser({
      email,
      password,
      email_confirm: true,
      user_metadata: {
        name,
        establishment_name: establishmentName
      }
    })

    if (createError) {
      console.error('Error creating user in auth:', createError)
      throw createError
    }

    if (!newUser.user) {
      throw new Error('User creation succeeded but no user data returned')
    }

    // Create or get establishment
    let establishmentId: string | null = null
    
    if (establishmentName) {
      try {
        // Check if establishment exists (using service role bypasses RLS)
        const { data: existingEstab, error: selectError } = await supabaseAdmin
          .from('establishments')
          .select('id')
          .eq('name', establishmentName)
          .maybeSingle()

        if (selectError && selectError.code !== 'PGRST116') {
          console.error('Error checking establishment:', selectError)
          throw new Error(`Failed to check establishment: ${selectError.message}`)
        }

        if (existingEstab) {
          establishmentId = existingEstab.id
        } else {
          // Create new establishment
          const { data: newEstablishment, error: estabError } = await supabaseAdmin
            .from('establishments')
            .insert({
              name: establishmentName,
              slug: establishmentName.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '')
            })
            .select('id')
            .single()

          if (estabError) {
            console.error('Error creating establishment:', estabError)
            throw new Error(`Failed to create establishment: ${estabError.message || estabError.code}`)
          }
          
          if (!newEstablishment?.id) {
            throw new Error('Establishment created but no ID returned')
          }
          
          establishmentId = newEstablishment.id
        }
      } catch (estabErr: any) {
        console.error('Establishment creation/check failed:', estabErr)
        throw estabErr
      }
    }

    // Create profile for the new user (using service role bypasses RLS)
    try {
      const { error: profileError } = await supabaseAdmin
        .from('profiles')
        .insert({
          user_id: newUser.user.id,
          full_name: name || email,
          status: 'active',
          establishment_id: establishmentId
        })

      if (profileError) {
        console.error('Error creating profile:', profileError)
        // Check if it's a unique/duplicate error (profile might already exist via trigger)
        const isDuplicateError = 
          profileError.code === '23505' || // Unique violation
          profileError.message?.includes('duplicate') ||
          profileError.message?.includes('unique constraint')
        
        if (!isDuplicateError) {
          throw new Error(`Failed to create profile: ${profileError.message || profileError.code}`)
        } else {
          console.log('Profile already exists (likely created by trigger), continuing...')
        }
      } else {
        console.log('Profile created successfully')
      }
    } catch (profileErr: any) {
      console.error('Profile creation failed:', profileErr)
      throw profileErr
    }

    console.log(`Admin ${user.email} created user ${email} with profile`)

    return new Response(
      JSON.stringify({ 
        success: true, 
        user: {
          id: newUser.user.id,
          email: newUser.user.email
        }
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      }
    )

  } catch (error: any) {
    console.error('Error in create-user function:', error)
    
    // Log more details for debugging
    const errorDetails = {
      message: error.message,
      name: error.name,
      stack: error.stack,
      code: error.code,
      status: error.status,
      details: error.details
    }
    
    console.error('Error details:', JSON.stringify(errorDetails, null, 2))
    
    // Return appropriate status code
    const statusCode = error.status || error.code === 'PGRST116' ? 404 : 
                        error.code === '23505' ? 409 : // Unique violation
                        error.code === '23503' ? 400 : // Foreign key violation
                        500
    
    return new Response(
      JSON.stringify({ 
        error: error.message || 'An unexpected error occurred',
        details: process.env.DENO_ENV === 'development' ? errorDetails : undefined
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: statusCode,
      }
    )
  }
})

